---
layout:     post
title:      "MySql避免重复插入记录方法"
subtitle:   "IGNORE,REPLACE,ON DUPLICATE KEY UPDATE"
date:       2017-08-20 19:00:00
author:     "Gee"
header-img: "img/post-bg-2017-08-21.jpg"
tags:
    - 数据库
---

> 作为程序员，先来一篇技术博文表明自己的身份

&emsp;&emsp;本文章来给大家提供三种在mysql中避免重复插入记录方法，主要是讲到了ignore,Replace,ON DUPLICATE KEY UPDATE三种方法，各位同学可尝试参考。

### 方案一：使用ignore关键字

如果是用主键primary或者唯一索引unique区分了记录的唯一性,避免重复插入记录可以使用：


```sql
INSERT IGNORE INTO `table_name` (`email`, `phone`, `user_id`) VALUES ('test9@163.com', '99999', '9999');
```

&emsp;&emsp;这样当有重复记录就会忽略,执行后返回数字0。

&emsp;&emsp;还有个应用就是复制表,避免重复记录：


```sql
INSERT IGNORE INTO `table_1` (`name`) SELECT `name` FROM `table_2`;
```

### 方案二：使用Replace

&emsp;&emsp;语法格式：


```sql
REPLACE INTO `table_name`(`col_name`, ...) VALUES (...);
REPLACE INTO `table_name` (`col_name`, ...) SELECT ...;
REPLACE INTO `table_name` SET `col_name`='value',
```

&emsp;&emsp;算法说明：

&emsp;&emsp;REPLACE的运行与INSERT很相像,但是如果旧记录与新记录有相同的值，则在新记录被插入之前，旧记录被删除，即：

- 尝试把新行插入到表中 
- 当因为对于主键或唯一关键字出现重复关键字错误而造成插入失败时，从表中删除含有重复关键字值的冲突行，并再次尝试把新行插入到表中 
- 旧记录与新记录有相同的值的判断标准就是：表有一个PRIMARY KEY或UNIQUE索引。否则，使用一个REPLACE语句没有意义，该语句会与INSERT相同，因为没有索引被用于确定是否新行复制了其它的行。

&emsp;&emsp;返回值：

&emsp;&emsp;REPLACE语句会返回一个数，来指示受影响的行的数目。该数是被删除和被插入的行数的和受影响的行数可以容易地确定是否REPLACE只添加了一行，或者是否REPLACE也替换了其它行：检查该数是否为1（添加）或更大（替换）。

&emsp;&emsp;示例:
&emsp;&emsp;# eg:(phone字段为唯一索引)

```sql
REPLACE INTO `table_name` (`email`, `phone`, `user_id`) VALUES ('test569', '99999', '123');
```

### 方案三：ON DUPLICATE KEY UPDATE

&emsp;&emsp;如上所写，你也可以在INSERT INTO后面加上 ON DUPLICATE KEY UPDATE方法来实现。如果您指定了ON DUPLICATE KEY UPDATE，并且插入行后会导致在一个UNIQUE索引或PRIMARY KEY中出现重复值，则执行旧行UPDATE。

&emsp;&emsp;例如，如果列a被定义为UNIQUE，并且包含值1，则以下两个语句具有相同的效果：

```sql
INSERT INTO `table` (`a`, `b`, `c`) VALUES (1, 2, 3) ON DUPLICATE KEY UPDATE `c`=`c`+1; 
```

```sql
UPDATE `table` SET `c`=`c`+1 WHERE `a`=1;
```

&emsp;&emsp;如果行作为新记录被插入，则受影响行的值为1；如果原有的记录被更新，则受影响行的值为2。

&emsp;&emsp;注释：如果列b也是唯一列，则INSERT与此UPDATE语句相当：

```sql
UPDATE `table` SET `c`=`c`+1 WHERE `a`=1 OR `b`=2 LIMIT 1;
```

&emsp;&emsp;如果a=1 OR b=2与多个行向匹配，则只有一个行被更新。通常，您应该尽量避免对带有多个唯一关键字的表使用ON DUPLICATE KEY子句。

&emsp;&emsp;您可以在UPDATE子句中使用VALUES(col_name)函数从INSERT…UPDATE语句的INSERT部分引用列值。换句话说，如果没有发生重复关键字冲突，则UPDATE子句中的VALUES(col_name)可以引用被插入的col_name的值。本函数特别适用于多行插入。VALUES()函数只在INSERT…UPDATE语句中有意义，其它时候会返回NULL。

```sql
INSERT INTO `table` (`a`, `b`, `c`) VALUES (1, 2, 3), (4, 5, 6) ON DUPLICATE KEY UPDATE `c`=VALUES(`a`)+VALUES(`b`);
```

&emsp;&emsp;本语句与以下两个语句作用相同：

```sql
INSERT INTO `table` (`a`, `b`, `c`) VALUES (1, 2, 3) ON DUPLICATE KEY UPDATE `c`=3; 
INSERT INTO `table` (`a`, `b`, `c`) VALUES (4, 5, 6) ON DUPLICATE KEY UPDATE c=9;
```

&emsp;&emsp;注释：当您使用ON DUPLICATE KEY UPDATE时，DELAYED选项被忽略。

特别说明：在MYSQL中UNIQUE索引将会对null字段失效，也就是说(a字段上建立唯一索引)，下面这个语句，是可以重复插入的（联合唯一索引也一样）：

```sql
INSERT INTO `test` (`a`) VALUES (NULL);
```